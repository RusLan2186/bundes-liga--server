// npm install sharp glob - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
// node convert-images.mjs - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç !—Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫

import fs from 'fs';
import path, { dirname, join } from 'path';
import { fileURLToPath } from 'url';
import { glob } from 'glob';
import sharp from 'sharp';

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ webp –∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
async function convertToWebp(filePath) {
    const ext = path.extname(filePath);
    const fileName = path.basename(filePath, ext);
    const outputFile = join(path.dirname(filePath), `${fileName}.webp`);

    try {
        await sharp(filePath)
            .webp({ quality: 80 })
            .toFile(outputFile);

        console.log(`‚úÖ ${filePath} ‚Üí ${outputFile}`);

        // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        fs.unlinkSync(filePath);
        console.log(`üóë –£–¥–∞–ª—ë–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª: ${filePath}`);
    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, err);
    }
}

// –ó–∞–º–µ–Ω–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML/CSS
async function updateFileReferences(extensions, fileTypes) {
    const files = await glob(`**/*.{${fileTypes.join(',')}}`, { ignore: 'node_modules/**' });

    if (files.length === 0) {
        console.log(`‚ö† –§–∞–π–ª—ã ${fileTypes.join(', ')} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
        return;
    }

    for (const file of files) {
        let content = fs.readFileSync(file, 'utf8');
        let replaced = false;

        extensions.forEach(ext => {
            const regex = new RegExp(`\\.${ext}`, 'gi');
            if (regex.test(content)) replaced = true;
            content = content.replace(regex, '.webp');
        });

        if (replaced) {
            fs.writeFileSync(file, content, 'utf8');
            console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –≤ ${path.relative(__dirname, file)}`);
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üîç –ò—â—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    const imageFiles = await glob('**/*.{jpg,jpeg,png}', { ignore: 'node_modules/**' });

    if (imageFiles.length === 0) {
        console.log('‚ö† –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è JPG/PNG –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        return;
    }

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageFiles.length}`);
    await Promise.all(imageFiles.map(file => convertToWebp(file)));

    console.log('‚úè –û–±–Ω–æ–≤–ª—è—é HTML –∏ CSS...');
    await updateFileReferences(['jpg', 'jpeg', 'png'], ['html', 'css', 'scss']);

    console.log('‚úÖ –ì–æ—Ç–æ–≤–æ!');
}

main();
