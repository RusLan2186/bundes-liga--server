import fs from 'fs';
import path from 'path';
import { glob } from 'glob';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (1rem = 16px)
const baseFontSize = 16;

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ px ‚Üí rem
function pxToRem(match, value) {
    const px = parseFloat(value);
    const remValue = (px / baseFontSize).toFixed(4); // –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    return `${remValue}rem`;
}

// –ó–∞–º–µ–Ω–∞ –≤–æ –≤—Å–µ—Ö CSS/SCSS
async function convertPxToRem() {
    const files = await glob('**/*.{css,scss}', { ignore: 'node_modules/**' });

    if (files.length === 0) {
        console.log('‚ö† CSS/SCSS —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        return;
    }

    files.forEach(file => {
        let content = fs.readFileSync(file, 'utf8');

        // –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤–∏–¥–∞ 12px, 0.5px –∏ —Ç.–¥.
        const updatedContent = content.replace(/(\d*\.?\d+)px\b/g, pxToRem);

        if (content !== updatedContent) {
            fs.writeFileSync(file, updatedContent, 'utf8');
            console.log(`üîÑ –û–±–Ω–æ–≤–ª—ë–Ω —Ñ–∞–π–ª: ${path.relative(__dirname, file)}`);
        }
    });

    console.log('‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
}

convertPxToRem();
